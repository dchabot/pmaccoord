CLOSE

;################################################
;; \file
;; Define motion for 2 slit Apertures
;;
;; Original Author: Tom Cobb
;;
;; Defined axes:
;; - X (addr 6) = centre in same EGUs as aperture
;; - Y (addr 7) = gap in same EGUs as aperture
;;
;; Macros
;; - COORD = $(COORD)  CS number, e.g. 2
;; - PLC = $(PLC)  PLC number, should be CS number+15, e.g. 17
;; - AP = $(AP)  Axisnum for Aperture+ (clips the +ve edge of the beam), e.g. 1
;; - AM = $(AM)  Axisnum for Aperture- (clips the -ve edge of the beam), e.g. 3
;; - ASIZE = $(ASIZE)  Size of Aperture, e.g. 5.85
;################################################

; Change to CS$(COORD)
&$(COORD)

; Set relevant axes to use kinematics
#$(AP)->I ; +ve Aperture
#$(AM)->I ; -ve Aperture

; These are set by motor_in_cs.template
#define APMOVE P(4700+$(AP))
#define APMRES P(4800+$(AP))
#define APOFF  P(4900+$(AP))
#define AMMOVE P(4700+$(AM))
#define AMMRES P(4800+$(AM))
#define AMOFF  P(4900+$(AM))

; Store aperture size
#define ASIZE Q20
ASIZE = $(ASIZE)

; Calculate gap and centre from aperture positions
#define APPOS (APMRES*P$(AP)+APOFF)
#define AMPOS (AMMRES*P$(AM)+AMOFF)
#define CENTRE Q7
#define GAP Q8
OPEN FORWARD
CLEAR
    CENTRE = (APPOS + AMPOS)/2
    GAP = ASIZE - AMPOS + APPOS
CLOSE

; Calculate aperture positions in cts from gap and centre
#define APPOS Q228
#define AMPOS Q229
OPEN INVERSE
CLEAR
    ; calculate in EGUs
    APPOS = CENTRE - (ASIZE - GAP)/2
    AMPOS = CENTRE + (ASIZE - GAP)/2
    ; then in cts
    P$(AP) = (APPOS - APOFF)/APMRES
    P$(AM) = (AMPOS - AMOFF)/AMMRES
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32)
#define APPOS (APMRES*m$(AP)62/(I$(AP)08*32)+APOFF)
#define AMPOS (AMMRES*m$(AM)62/(I$(AM)08*32)+AMOFF)
#define CENTRE Q87
#define GAP Q88
OPEN PLC$(PLC)
CLEAR
    ADDRESS&$(COORD)
    CENTRE = (APPOS + AMPOS)/2
    GAP = ASIZE - AMPOS + APPOS
    ; If aperture motor record did the last move, set demands = readbacks
    if (APMOVE = 1)
    or (AMMOVE = 1)
        APMOVE = 0
        AMMOVE = 0
        Q77 = Q87
        Q78 = Q88
    endif
CLOSE
ENABLE PLC$(PLC)
