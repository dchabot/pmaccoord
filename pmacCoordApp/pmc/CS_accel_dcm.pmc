CLOSE

;###############################################
;; \file
;; Define motion for Energy in Accel DCM
;;
;; Original Author: Tom Cobb.
;; Modified by Emma Shepherd to add support for
;; backlash/hysterisis correction (see PROG_CS_motion_backlash.pmc)
;;
;; Defined axes:
;; - X (addr 6) = Energy in kEv
;; - Y (addr 7) = Offset in mm
;;
;; Macros (and example values):
;; - COORD = $(COORD)  CS number (only works for CS 1..9), e.g. 2
;; - PLC = $(PLC)  PLC number, should be CS number+15, e.g. 17
;; - BRAGG = $(BRAGG)  Axisnum for Bragg, e.g. 2
;; - T2 = $(T2)  Axisnum for T2, e.g. 3
;################################################

; Change to CS$(COORD)
&$(COORD)

; Set relevant axes to use kinematics
#$(BRAGG)->I
#$(T2)->I

; These are set by motor_in_cs.template
#define BMOVE P(4700+$(BRAGG))
#define BMRES P(4800+$(BRAGG))
#define BOFF  P(4900+$(BRAGG))
#define TMOVE P(4700+$(T2))
#define TMRES P(4800+$(T2))
#define TOFF  P(4900+$(T2))

; These are set by the motion program for backlash correction
#define BBDST Q(400+$(BRAGG))
#define TBDST Q(400+$(T2))

; Crystal d spacing in angstrom
; NOTE: default is silicon 111 at room temp,
; at liquid N2 it is 3.13475 or 3.13492 depending on who you believe...)
#define DSPACING Q20
DSPACING=3.1355
; Default mode is to move Bragg and T2
#define LOCKT2 Q21
LOCKT2=0
; EvLambda constant
#define EVLAMBDA Q22
EVLAMBDA=12.3985

; Calculate Energy and Offset from Bragg and T2
#define BPOS (BMRES*P$(BRAGG)+BOFF)
#define TPOS (TMRES*P$(T2)+TOFF)
#define ENERGY Q7
#define OFFSET Q8
#define SETERROR M(100*$(COORD)+5082)=1
; Local variables
#define NLAMBDA Q128
OPEN FORWARD
CLEAR
    NLAMBDA=2*DSPACING*sin(BPOS)
    IF (ABS(NLAMBDA)>0.01)
        ENERGY = EVLAMBDA/NLAMBDA
        OFFSET = 2*TPOS*cos(BPOS)
    ELSE
        SETERROR
    ENDIF
CLOSE

; Calculate Bragg and T2 from Energy and Offset
; Local variables
#define SINTHETA Q228
#define BPOS Q229
#define TPOS Q230
OPEN INVERSE
CLEAR
    SINTHETA=EVLAMBDA/(2*DSPACING*ENERGY)
    IF (ABS(SINTHETA)<1)
        ; calculate bragg in EGUs
        BPOS=asin(SINTHETA)
        ; then in cts
        P$(BRAGG)=(BPOS+BBDST-BOFF)/BMRES
        ; Don't calculate T2 if we are in 'locked T2' mode
        IF (LOCKT2=0)
            ; calculate T2 in EGUs
            TPOS=OFFSET/(2*cos(asin(SINTHETA)))
            ; then in cts
            P$(T2)=(TPOS+TBDST-TOFF)/TMRES
        ENDIF
    ELSE
        SETERROR
    ENDIF
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32) and no error reporting
#define BPOS (BMRES*m$(BRAGG)62/(I$(BRAGG)08*32)+BOFF)
#define TPOS (TMRES*m$(T2)62/(I$(T2)08*32)+TOFF)
#define ENERGY Q87
#define OFFSET Q88
; Local variables
#define NLAMBDA Q328
OPEN PLC $(PLC)
CLEAR
    ADDRESS&$(COORD)
    NLAMBDA=2*DSPACING*sin(BPOS)
    IF (ABS(NLAMBDA)>0.01)
        ENERGY = EVLAMBDA/NLAMBDA
        OFFSET = 2*TPOS*cos(BPOS)
    ENDIF
    ; If bragg or t2 motor record did the last move, set demands = readbacks
    if (BMOVE = 1)
    or (TMOVE = 1)
        BMOVE = 0
        TMOVE = 0
        Q77 = Q87
        Q78 = Q88
    endif
CLOSE
ENABLE PLC $(PLC)


