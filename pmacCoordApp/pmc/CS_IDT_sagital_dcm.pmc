CLOSE

;###############################################
;; \file
;; Define motion for Energy in IDT sagital DCM
;;
;; Original Author: Tom Cobb.
;;
;; Defined axes:
;; - X (addr 6) = Energy in kEv
;; - Y (addr 7) = Beam Offset in mm
;;
;; Macros (and example values):
;; - COORD = $(COORD)  CS number (only works for CS 1..9), e.g. 2
;; - PLC = $(PLC)  PLC number, should be CS number+15, e.g. 17
;; - BRAGG = $(BRAGG)  Axisnum for Bragg, e.g. 2
;; - PERP = $(PERP)  Axisnum for Perp, e.g. 3
;; - Z = $(Z)  Axisnum for Z, e.g. 4
;################################################

; Change to CS$(COORD)
&$(COORD)

; Set relevant axes to use kinematics
#$(BRAGG)->I
#$(PERP)->I
#$(Z)->I

; These are set by motor_in_cs.template
#define BMOVE P(4700+$(BRAGG))
#define BMRES P(4800+$(BRAGG))
#define BOFF  P(4900+$(BRAGG))
#define PMOVE P(4700+$(PERP))
#define PMRES P(4800+$(PERP))
#define POFF  P(4900+$(PERP))
#define ZMOVE P(4700+$(Z))
#define ZMRES P(4800+$(Z))
#define ZOFF  P(4900+$(Z))

; Crystal d spacing in angstrom
; NOTE: default is silicon 111 at room temp,
; at liquid N2 it is 3.13475 or 3.13492 depending on who you believe...)
#define DSPACING Q20
DSPACING=3.1355
; EvLambda constant
#define EVLAMBDA Q22
EVLAMBDA=12.3985

; Calculate Energy and Offset from Bragg and PERP
#define BPOS (BMRES*P$(BRAGG)+BOFF)
#define PPOS (PMRES*P$(PERP)+POFF)
#define ZPOS (ZMRES*P$(Z)+ZOFF)
#define ENERGY Q7
#define OFFSET Q8
#define SETERROR M(100*$(COORD)+5082)=1
; Local variables
#define NLAMBDA Q128
OPEN FORWARD
CLEAR
    NLAMBDA=2*DSPACING*sin(BPOS)
    IF (ABS(NLAMBDA)>0.01)
        ENERGY = EVLAMBDA/NLAMBDA
        OFFSET = 2*PPOS*cos(BPOS)
    ELSE
        SETERROR
    ENDIF
CLOSE

; Calculate Bragg and PERP from Energy and Offset
; Local variables
#define SINTHETA Q228
#define BPOS Q229
#define PPOS Q230
#define ZPOS Q231
OPEN INVERSE
CLEAR
    SINTHETA=EVLAMBDA/(2*DSPACING*ENERGY)
    IF (ABS(SINTHETA)<1)
        ; calculate bragg in EGUs
        BPOS=asin(SINTHETA)
        ; then in cts
        P$(BRAGG)=(BPOS-BOFF)/BMRES
        ; calculate PERP in EGUs
        PPOS=OFFSET/(2*cos(asin(SINTHETA)))
        ; then in cts
        P$(PERP)=(PPOS-POFF)/PMRES
        ; calculate Z in EGUs
        ZPOS=OFFSET/(2*SINTHETA)            
        ; then in cts
        P$(Z)=(ZPOS-ZOFF)/ZMRES        
    ELSE
        SETERROR
    ENDIF
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32) and no error reporting
#define BPOS (BMRES*m$(BRAGG)62/(I$(BRAGG)08*32)+BOFF)
#define PPOS (PMRES*m$(PERP)62/(I$(PERP)08*32)+POFF)
#define ENERGY Q87
#define OFFSET Q88
; Local variables
#define NLAMBDA Q328
OPEN PLC $(PLC)
CLEAR
    ADDRESS&$(COORD)
    NLAMBDA=2*DSPACING*sin(BPOS)
    IF (ABS(NLAMBDA)>0.01)
        ENERGY = EVLAMBDA/NLAMBDA
        OFFSET = 2*PPOS*cos(BPOS)
    ENDIF
    ; If bragg or PERP motor record did the last move, set demands = readbacks
    if (BMOVE = 1)
    or (PMOVE = 1)
    or (ZMOVE = 1)    
        BMOVE = 0
        PMOVE = 0
        ZMOVE = 0
        Q77 = Q87
        Q78 = Q88
    endif
CLOSE
ENABLE PLC $(PLC)


