CLOSE

;####################################################
; Generic program for moving any co-ordinate system
; Original Author: Tom Cobb
;
; Modified by Emma Shepherd, August 2010 to add support for
; backlash/hysteresis corrections for up to six motors.
;
; Important notes:
; * The NTM field of the co-ordinate system motor records MUST be
;   set to 'NO' for this program to work.
; * A separate program must be downloaded for each co-ordinate system.
; * The BDST macro should be set in the same way as you would setup the
;    .BDST field of the motor record.
; * The SLOWFEEDRATE and FASTFEEDRATE macros allow the velocity of the
;    final backlash take-out move to be slower than the rest of the move.
;    Default feedrate is 10000 so normally set FASTFEEDRATE to
;     this value and SLOWFEEDRATE an appropriate factor lower.
;
; Used variables: Q71..Q79, Q81..Q89, Q400..Q439
; Macros:
; PROG = $(PROG) ;Motion program number, e.g. 10
; MTR1 .. MTR6 ;Set to motor axis number on the PMAC/Geobrick requiring backlash correction, or 0 if unused.
; MTR1BDST .. MTR6BDST ;Set to motor backlash distance in motor record engineering units.
; SLOWFEEDRATE = $(SLOWFEEDRATE) ;Feedrate for backlash correction move, in Isx90 units, e.g. 2000.
; FASTFEEDRATE = $(FASTFEEDRATE) ;Feedrate for normal move, in Isx90 units, e.g. 10000.
;
; You should do a $$$ or type the following the first time you load this prog.
; If you type the commands in, ignore any errors. If you $$$, PLC1 will do it
; automatically for you at startup:
;&16 DEFINE LOOKAHEAD 50,10
;&15 DEFINE LOOKAHEAD 50,10
;&14 DEFINE LOOKAHEAD 50,10
;&13 DEFINE LOOKAHEAD 50,10
;&12 DEFINE LOOKAHEAD 50,10
;&11 DEFINE LOOKAHEAD 50,10
;&10 DEFINE LOOKAHEAD 50,10
;&9 DEFINE LOOKAHEAD 50,10
;&8 DEFINE LOOKAHEAD 50,10
;&7 DEFINE LOOKAHEAD 50,10
;&6 DEFINE LOOKAHEAD 50,10
;&5 DEFINE LOOKAHEAD 50,10
;&4 DEFINE LOOKAHEAD 50,10
;&3 DEFINE LOOKAHEAD 50,10
;&2 DEFINE LOOKAHEAD 50,10
;####################################################

;This program defines the program needed to do a move using the motor record
;on a CS axis
;to do a move we need to do &{CS}R
;to stop a move we need to do &{CS}A
;demand values are in &{CS}Q71..79
;The following are set by the motor record:
;Isx87 = Acceleration
;Isx88 = S curve
;Isx89 = Feedrate

; Set some defaults for all CS axes
i5213,15,100=50   ; segmentation time (needed for lookahead)
i5220,15,100=50   ; lookahead length (needed to limit max velocity to max set in CS)
i5250,15,100=1    ; Enable kinematics

#define BDST1 Q(400+$(MTR1))
#define BDST2 Q(400+$(MTR2))
#define BDST3 Q(400+$(MTR3))
#define BDST4 Q(400+$(MTR4))
#define BDST5 Q(400+$(MTR5))
#define BDST6 Q(400+$(MTR6))
#define NEED_CORRECTION Q433
#define MTR1START Q434
#define MTR2START Q435
#define MTR3START Q436
#define MTR4START Q437
#define MTR5START Q438
#define MTR6START Q439

; These are set by the motor records for the real motors:
#define MTR1MRES P(4800+$(MTR1))
#define MTR2MRES P(4800+$(MTR2))
#define MTR3MRES P(4800+$(MTR3))
#define MTR4MRES P(4800+$(MTR4))
#define MTR5MRES P(4800+$(MTR5))
#define MTR6MRES P(4800+$(MTR6))

OPEN PROG $(PROG)
CLEAR
LINEAR
ABS

NEED_CORRECTION=0
BDST1=0
BDST2=0
BDST3=0
BDST4=0
BDST5=0
BDST6=0

; First record the starting motor positions
MTR1START=m($(MTR1)*100+62)
MTR2START=m($(MTR2)*100+62)
MTR3START=m($(MTR3)*100+62)
MTR4START=m($(MTR4)*100+62)
MTR5START=m($(MTR5)*100+62)
MTR6START=m($(MTR6)*100+62)

; Trigger the initial co-ordinate system move first at full speed
FRAX(A,B,C,U,V,W,X,Y,Z)
F$(FASTFEEDRATE)
A(Q71)B(Q72)C(Q73)U(Q74)V(Q75)W(Q76)X(Q77)Y(Q78)Z(Q79)

; Check if a backlash correction is required on any
; of the motors (taking into account MRES for direction).
; Invert the backlash distance to turn it into an initial
; overshoot offset.

if (MTR1MRES>0)
    if ($(MTR1BDST)<0 AND m($(MTR1)*100+62)>MTR1START OR $(MTR1BDST)>0 AND m($(MTR1)*100+62)<MTR1START)
        NEED_CORRECTION=1
        BDST1=-$(MTR1BDST)
    endif
else
    if ($(MTR1BDST)<0 AND m($(MTR1)*100+62)<MTR1START OR $(MTR1BDST)>0 AND m($(MTR1)*100+62)>MTR1START)
        NEED_CORRECTION=1
        BDST1=-$(MTR1BDST)
    endif
endif

if (MTR2MRES>0)
    if ($(MTR2BDST)<0 AND m($(MTR2)*100+62)>MTR2START OR $(MTR2BDST)>0 AND m($(MTR2)*100+62)<MTR2START)
        NEED_CORRECTION=1
        BDST2=-$(MTR2BDST)
    endif
else
    if ($(MTR2BDST)<0 AND m($(MTR2)*100+62)<MTR2START OR $(MTR2BDST)>0 AND m($(MTR2)*100+62)>MTR2START)
        NEED_CORRECTION=1
        BDST2=-$(MTR2BDST)
    endif
endif

if (MTR3MRES>0)
    if ($(MTR3BDST)<0 AND m($(MTR3)*100+62)>MTR3START OR $(MTR3BDST)>0 AND m($(MTR3)*100+62)<MTR3START)
        NEED_CORRECTION=1
        BDST3=-$(MTR3BDST)
    endif
else
    if ($(MTR3BDST)<0 AND m($(MTR3)*100+62)<MTR3START OR $(MTR3BDST)>0 AND m($(MTR3)*100+62)>MTR3START)
        NEED_CORRECTION=1
        BDST3=-$(MTR3BDST)
    endif
endif

if (MTR4MRES>0)
    if ($(MTR4BDST)<0 AND m($(MTR4)*100+62)>MTR4START OR $(MTR4BDST)>0 AND m($(MTR4)*100+62)<MTR4START)
        NEED_CORRECTION=1
        BDST4=-$(MTR4BDST)
    endif
else
    if ($(MTR4BDST)<0 AND m($(MTR4)*100+62)<MTR4START OR $(MTR4BDST)>0 AND m($(MTR4)*100+62)>MTR4START)
        NEED_CORRECTION=1
        BDST4=-$(MTR4BDST)
    endif
endif

if (MTR5MRES>0)
    if ($(MTR5BDST)<0 AND m($(MTR5)*100+62)>MTR5START OR $(MTR5BDST)>0 AND m($(MTR5)*100+62)<MTR5START)
        NEED_CORRECTION=1
        BDST5=-$(MTR5BDST)
    endif
else
    if ($(MTR5BDST)<0 AND m($(MTR5)*100+62)<MTR5START OR $(MTR5BDST)>0 AND m($(MTR5)*100+62)>MTR5START)
        NEED_CORRECTION=1
        BDST5=-$(MTR5BDST)
    endif
endif

if (MTR6MRES>0)
    if ($(MTR6BDST)<0 AND m($(MTR6)*100+62)>MTR6START OR $(MTR6BDST)>0 AND m($(MTR6)*100+62)<MTR6START)
        NEED_CORRECTION=1
        BDST6=-$(MTR6BDST)
    endif
else
    if ($(MTR6BDST)<0 AND m($(MTR6)*100+62)<MTR6START OR $(MTR6BDST)>0 AND m($(MTR6)*100+62)>MTR6START)
        NEED_CORRECTION=1
        BDST6=-$(MTR6BDST)
    endif
endif


if (NEED_CORRECTION=1)
    ; Trigger the co-ordinate system move using the backlash offset positions
    F$(FASTFEEDRATE)
    A(Q71)B(Q72)C(Q73)U(Q74)V(Q75)W(Q76)X(Q77)Y(Q78)Z(Q79)

    BDST1=0
    BDST2=0
    BDST3=0
    BDST4=0
    BDST5=0
    BDST6=0

    ; Trigger the co-ordinate system move now at slower speed to bring back to final position
    F$(SLOWFEEDRATE)
    A(Q71)B(Q72)C(Q73)U(Q74)V(Q75)W(Q76)X(Q77)Y(Q78)Z(Q79)
endif

DWELL0
CLOSE
