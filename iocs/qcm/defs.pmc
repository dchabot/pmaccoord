; trig in radians
i15=1

; Mono
; coordiate system id
; plc id
; motor axis bragg1 (upstream)
; motor axis bragg2 (downstream)
; mrad resolution for bragg1 (NB keep sign same as real bragg1 motor MRES)
; mrad resolution for bragg2 (NB keep sign same as real bragg2 motor MRES)
; (Note the real bragg1/2 motors can have any resolution/unit desired)
CLOSE

;###############################################
; Define motion for Energy in Diamond QCM
; Original Author: Pete Leicester
; Defined axes:
;   X (addr 6) = Energy1 in kEv
;   Y (addr 7) = EnergyOffset in kEv
;   Z (addr 8) = Energy2 in kEv
; Macros (and example values):
;   COORD - CS number (only works for CS 1..9), e.g. 2
;   PLC - PLC number, should be CS number+15, e.g. 17
;   BRAGG1 - Axisnum for Bragg1, e.g. 2
;   BRAGG2 - Axisnum for Bragg2, e.g. 3
;   RADMRES1 - resolution for bragg1 (NB keep sign same as real bragg1 motor MRES)
;   RADMRES2 - resolution for bragg2 (NB keep sign same as real bragg2 motor MRES)
; (Note1 the real bragg1/2 motors can have any resolution/unit desired
;   so can be in steps, degrees or rad (if set the same as RADMRES))
; (Note2  remember to increase the resolution by *32 to match the pmacSetAxisScale(3,1,32)
;   calls in the start up file)
;
; Additional controls that could be changed from EPIC's
; Q20 - Mode (0= energy and offset, 1= two independent energy axis)
;
; Readbacks for epics
; Q21 - crystal spacing (3.13475 for Si(111), 1.637069796 for Si(311)). Value defined by switch wired to pmac input.
;
;################################################

; Change to CS2
&2

; Set relevant axes to use kinematics
#1->I
#2->I

; These are set by motor_in_cs.template
#define B1MOVE P(4700+1)
#define B1MRES P(4800+1)
#define B1OFF  P(4900+1)
#define B2MOVE P(4700+2)
#define B2MRES P(4800+2)
#define B2OFF  P(4900+2)

; Mode of operation
; 0 = Energy and EnergyOffset compound motors (i.e. bragg2=bragg1+offset)
; 1 = Independent energy axis (i.e. independent bragg1 and bragg2)
; define default value for epics to overwrite
#define MODE Q20
MODE=0

; Setup energy calculation variables
; Energy in keV = {Evlamda}/(2*{d}*sin(Bragg))
; where Bragg is in rad's
;       Evlamda = 12.3985
;       d = crystal spacing in angstrom (dependent on temperature)
;       d (at room temp) = 5.430845307 / sqrt(h^2+k^2+l^2) and h,k,l = 1,1,1 or 3,1,1 depending on silicon type
;       d (at room temp) = 3.1355 for Si(111)
;       d (at room temp) = 1.637461471 for Si(311)
;       d (at liguid N2 temp) = 5.429546269 / sqrt(h^2+k^2+l^2) and h,k,l = 1,1,1 or 3,1,1 depending on silicon type
;       d (at liguid N2 temp) = 3.13475 for Si(111)
;       d (at liguid N2 temp) = 1.637069796 for Si(311)
; { This boils down to at room temp
;         Energy in keV = 1.977116887 / sin(Bragg) for Si(111)
;      or Energy in keV = 3.785890606 / sin(Bragg) for Si(311)
;   and at liguid N2 temp
;         Energy in keV = 1.977589919 / sin(Bragg) for Si(111)
;      or Energy in keV = 3.786796394 / sin(Bragg) for Si(311) }
;

; Define d = crystal spacing in angstrom Si(111) (default value for switch input to overwrite)
#define DSPACING Q21
DSPACING=3.13475

; Define Evlambda
#define EVLAMBDA Q22
EVLAMBDA=12.3985

; Q23 is used for debugging - value indicates where last error occurred in kinematic
#define ERRORLOC Q23

#define LASTMODE Q24
LASTMODE=MODE

#define LASTDSPACING Q25
LASTDSPACING=DSPACING

; This kinematic is for the QCM energy in kEv
; X = Q7 = Energy1 in kEv = {Evlamda}/(2*{d}*sin(Bragg1))
; Y = Q8 = EnergyOffset in kEv = Energy1 - Energy2
;                              = Energy1 - {Evlamda}/(2*{d}*sin(Bragg2))
; Z = Q9 = Energy2 in kEv = {Evlamda}/(2*{d}*sin(Bragg2))
#define B1POS (0.000000393930113302*(P1+(B1OFF/(B1MRES*32))))
#define B2POS (-0.000000393930113302*(P2+(B2OFF/(B2MRES*32))))
#define ENERGY1 Q7
#define EOFFSET Q8
#define ENERGY2 Q9
#define SETERROR M(100*2+5082)=1
; Local variables
#define NLAMBDA1 Q128
#define NLAMBDA2 Q129
OPEN FORWARD
CLEAR
    NLAMBDA1=2*DSPACING*SIN(B1POS)
    NLAMBDA2=2*DSPACING*SIN(B2POS)
    IF (ABS(NLAMBDA1)>0.0001)
        ENERGY1=EVLAMBDA/NLAMBDA1
        IF (ABS(NLAMBDA2)>0.0001)
            ENERGY2=EVLAMBDA/NLAMBDA2
            IF(MODE=0)
                EOFFSET=ENERGY2-ENERGY1
            ENDIF
        ELSE
            SETERROR
            ERRORLOC=4
        ENDIF
    ELSE
        SETERROR
        ERRORLOC=5
    ENDIF  
CLOSE

; Calculate Bragg from Energy and Offset
; P1 = Bragg1 position = arcsin({Evlamda}/(2*{d}*(Energy1))
; P2 = Bragg2 position = arcsin({Evlamda}/(2*{d}*(Energy2))
;                 where Energy2 = Energy1(Q7) - EnergyOffset(Q8)
;           or Bragg2 position = arcsin({Evlamda}/(2*{d}*(Energy2))
#define B1POS Q228
#define B2POS Q229
#define SINTHETA1 Q230
#define SINTHETA2 Q231

OPEN INVERSE
CLEAR
SINTHETA1=EVLAMBDA/(2*DSPACING*ENERGY1)
IF (ABS(SINTHETA1)<1)
    ; calculate bragg1 in EGUs
    B1POS = asin(SINTHETA1)
    ; then in cts
    P1=(B1POS/0.000000393930113302)-(B1OFF/(B1MRES*32))
    IF (MODE=0)
        SINTHETA2=EVLAMBDA/(2*DSPACING*(ENERGY1+EOFFSET))
        IF (ABS(SINTHETA2)<1)
            ; calculate bragg1 in EGUs
            B2POS = asin(SINTHETA2)
            ; then in cts
            P2=(B2POS/-0.000000393930113302)-(B2OFF/(B2MRES*32))
        ELSE
            SETERROR
            ERRORLOC=1
        ENDIF
    ELSE
        SINTHETA2=EVLAMBDA/(2*DSPACING*ENERGY2)
        IF (ABS(SINTHETA2)<1)
            ; calculate bragg1 in EGUs
            B2POS = asin(SINTHETA2)
            ; then in cts
            P2=(B2POS/-0.000000393930113302)-(B2OFF/(B2MRES*32))
        ELSE
            SETERROR
            ERRORLOC=2
        ENDIF
    ENDIF
ELSE
    SETERROR
    ERRORLOC=3
ENDIF
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32) and no error reporting
#define B1POS (0.000000393930113302*(m162/(I108*32)+(B1OFF/(B1MRES*32))))
#define B2POS (-0.000000393930113302*(m262/(I208*32)+(B2OFF/(B2MRES*32))))
#define ENERGY1 Q87
#define EOFFSET Q88
#define ENERGY2 Q89
; Local variables
#define NLAMBDA1 Q328
#define NLAMBDA2 Q329
OPEN PLC 17
CLEAR
    ADDRESS&2
    NLAMBDA1=2*DSPACING*SIN(B1POS)
    NLAMBDA2=2*DSPACING*SIN(B2POS)
    IF (ABS(NLAMBDA1)>0.0001)
        ENERGY1=EVLAMBDA/NLAMBDA1
        IF (ABS(NLAMBDA2)>0.0001)
            ENERGY2=EVLAMBDA/NLAMBDA2
            EOFFSET=ENERGY2-ENERGY1
        ENDIF
    ENDIF
    ; If bragg motor record did the last move, set demands = readbacks
    if (B1MOVE = 1)
    or (B2MOVE = 1)
        B1MOVE = 0
        B2MOVE = 0
        Q77 = Q87
        Q78 = Q88
        Q79 = Q89
    endif
    ; if mode or crystal spacing has changed then set demands = readback to 
    ; prevent undesired moves
    if (MODE!=LASTMODE)
    or (DSPACING!=LASTDSPACING)
        Q77 = Q87
        Q78 = Q88
        Q79 = Q89
        LASTMODE=MODE
        LASTDSPACING=DSPACING
    endif    
CLOSE
ENABLE PLC 17


;################################################
; Note on calibrating the energy in EPICS
; In order to correct the energy readback value linearly across the whole range
; of bragg it is necessary to adjust the EPICS motor offset of the real bragg
; motors BRAGG1 and BRAGG2. The resolution of these motors is defined by B1MRES
; and B2MRES.
; Therefore (if 'actual' is what it should read and 'readback' is the current energy value generated by the PLC):
;   epics offset correction(real b1 mtr) = ( ( bragg1(actual in rad) - bragg1(readback in rad) ) / RADMRES1 ) * B1MRES * 32
;   epics offset correction(real b2 mtr) = ( ( bragg2(actual in rad) - bragg2(readback in rad) ) / RADMRES2 ) * B2MRES * 32
; and
;   bragg1 in rad = arcsin(  Evlambda  / ( 2d * Energy1(kEv) ) )
;   bragg2 in rad = arcsin(  Evlambda  / ( 2d * Energy2(kEv) ) )
;
;################################################

