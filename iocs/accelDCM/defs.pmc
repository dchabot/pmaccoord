; trig in degrees
i15=0
CLOSE

;###############################################
;; \file
;; Define motion for Energy in Accel DCM
;;
;; Original Author: Tom Cobb.
;; Modified by Emma Shepherd to add support for
;; backlash/hysterisis correction (see PROG_CS_motion_backlash.pmc)
;;
;; Defined axes:
;; - X (addr 6) = Energy in kEv
;; - Y (addr 7) = Offset in mm
;;
;; Macros (and example values):
;; - COORD = 2  CS number (only works for CS 1..9), e.g. 2
;; - PLC = 17  PLC number, should be CS number+15, e.g. 17
;; - BRAGG = 1  Axisnum for Bragg, e.g. 2
;; - T2 = 2  Axisnum for T2, e.g. 3
;################################################

; Change to CS2
&2

; Set relevant axes to use kinematics
#1->I
#2->I

; These are set by motor_in_cs.template
#define BMOVE P(4700+1)
#define BMRES P(4800+1)
#define BOFF  P(4900+1)
#define TMOVE P(4700+2)
#define TMRES P(4800+2)
#define TOFF  P(4900+2)

; These are set by the motion program for backlash correction
#define BBDST Q(400+1)
#define TBDST Q(400+2)

; Crystal d spacing in angstrom
; NOTE: default is silicon 111 at room temp,
; at liquid N2 it is 3.13475 or 3.13492 depending on who you believe...)
#define DSPACING Q20
DSPACING=3.1355
; Default mode is to move Bragg and T2
#define LOCKT2 Q21
LOCKT2=0
; EvLambda constant
#define EVLAMBDA Q22
EVLAMBDA=12.3985

; Calculate Energy and Offset from Bragg and T2
#define BPOS (BMRES*P1+BOFF)
#define TPOS (TMRES*P2+TOFF)
#define ENERGY Q7
#define OFFSET Q8
#define SETERROR M(100*2+5082)=1
; Local variables
#define NLAMBDA Q128
OPEN FORWARD
CLEAR
    NLAMBDA=2*DSPACING*sin(BPOS)
    IF (ABS(NLAMBDA)>0.01)
        ENERGY = EVLAMBDA/NLAMBDA
        OFFSET = 2*TPOS*cos(BPOS)
    ELSE
        SETERROR
    ENDIF
CLOSE

; Calculate Bragg and T2 from Energy and Offset
; Local variables
#define SINTHETA Q228
#define BPOS Q229
#define TPOS Q230
OPEN INVERSE
CLEAR
    SINTHETA=EVLAMBDA/(2*DSPACING*ENERGY)
    IF (ABS(SINTHETA)<1)
        ; calculate bragg in EGUs
        BPOS=asin(SINTHETA)
        ; then in cts
        P1=(BPOS+BBDST-BOFF)/BMRES
        ; Don't calculate T2 if we are in 'locked T2' mode
        IF (LOCKT2=0)
            ; calculate T2 in EGUs
            TPOS=OFFSET/(2*cos(asin(SINTHETA)))
            ; then in cts
            P2=(TPOS+TBDST-TOFF)/TMRES
        ENDIF
    ELSE
        SETERROR
    ENDIF
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32) and no error reporting
#define BPOS (BMRES*m162/(I108*32)+BOFF)
#define TPOS (TMRES*m262/(I208*32)+TOFF)
#define ENERGY Q87
#define OFFSET Q88
; Local variables
#define NLAMBDA Q328
OPEN PLC 17
CLEAR
    ADDRESS&2
    NLAMBDA=2*DSPACING*sin(BPOS)
    IF (ABS(NLAMBDA)>0.01)
        ENERGY = EVLAMBDA/NLAMBDA
        OFFSET = 2*TPOS*cos(BPOS)
    ENDIF
    ; If bragg or t2 motor record did the last move, set demands = readbacks
    if (BMOVE = 1)
    or (TMOVE = 1)
        BMOVE = 0
        TMOVE = 0
        Q77 = Q87
        Q78 = Q88
    endif
CLOSE
ENABLE PLC 17


CLOSE

;####################################################
; Generic program for moving any co-ordinate system
; Original Author: Tom Cobb
; Used variables: Q71..Q79, Q81..Q89
; You should do a $$$ or type the following the first time you load this prog.
; If you type the commands in, ignore any errors. If you $$$, PLC1 will do it
; automatically for you at startup:
;&16 DEFINE LOOKAHEAD 50,10
;&15 DEFINE LOOKAHEAD 50,10
;&14 DEFINE LOOKAHEAD 50,10
;&13 DEFINE LOOKAHEAD 50,10
;&12 DEFINE LOOKAHEAD 50,10
;&11 DEFINE LOOKAHEAD 50,10
;&10 DEFINE LOOKAHEAD 50,10
;&9 DEFINE LOOKAHEAD 50,10
;&8 DEFINE LOOKAHEAD 50,10
;&7 DEFINE LOOKAHEAD 50,10
;&6 DEFINE LOOKAHEAD 50,10
;&5 DEFINE LOOKAHEAD 50,10
;&4 DEFINE LOOKAHEAD 50,10
;&3 DEFINE LOOKAHEAD 50,10
;&2 DEFINE LOOKAHEAD 50,10
;####################################################

;This program defines the program needed to do a move using the motor record
;on a CS axis
;to do a move we need to do &{CS}R
;to stop a move we need to do &{CS}A
;demand values are in &{CS}Q71..79
;The following are set by the motor record:
;Isx87 = Acceleration
;Isx88 = S curve
;Isx89 = Feedrate

; Set some defaults for all CS axes
i5213,15,100=50   ; segmentation time (needed for lookahead)
i5220,15,100=50   ; lookahead length (needed to limit max velocity to max set in CS)
i5250,15,100=1    ; Enable kinematics

OPEN PROG 10
CLEAR
LINEAR
ABS
; need to think about the consequences of including all axes in frax
FRAX(A,B,C,U,V,W,X,Y,Z)
A(Q71)B(Q72)C(Q73)U(Q74)V(Q75)W(Q76)X(Q77)Y(Q78)Z(Q79)
DWELL0
CLOSE

