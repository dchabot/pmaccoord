CLOSE

;################################################
;; \file
;; Define motion for flexure slits
;;
;; Original Author: Alan Greer
;;
;; Defined axes:
;; - X (addr 6) = gap in same EGUs as actuator
;;
;; Macros:
;; - COORD = 2  CS number, e.g. 2
;; - PLC = 17  PLC number, should be CS number+15, e.g. 17
;; - AS = 1  Axisnum for actuator stroke, e.g. 1
;; - LL = 46  Lever length in mm
;; - SW = 0.0  Slit width at U=0 in mm
;################################################

; Change to CS2
&2

; Set relevant axes to use kinematics
#1->I ; +ve blade

; These are set by motor_in_cs.template
#define ASMOVE P(4700+1)
#define ASMRES P(4800+1)
#define ASOFF  P(4900+1)

; Lever length
#define LEVERLENGTH Q20
LEVERLENGTH = 46
; Slit width
#define SLITWIDTH Q21
SLITWIDTH = 0.0

; Calculate Gap from actuator position
#define ASPOS (ASMRES*P1+ASOFF)
#define GAP Q7
OPEN FORWARD
; X = Q7 = gap in mm = (SW + 2LL(1-cos(arcsin(Actuator/LL))))
; The formula used for this calculation can be found in the document
; 100208 FAT protocol 301.pdf
; located in
; S:\Technical\Engineering\Beamline Eng\I10\Design (AndyM & A Day)\beamline components\14_Exit slits S4\FATS
CLEAR
    GAP=SLITWIDTH+2*LEVERLENGTH*(1-COS(ASIN(ASPOS/LEVERLENGTH)))
CLOSE

OPEN INVERSE
#define ASPOS Q228
CLEAR
    ; calculate actuator pos in EGUs
    ASPOS = LEVERLENGTH*SIN(ACOS(1-(GAP-SLITWIDTH)/(2*LEVERLENGTH)))
    ; then in cts
    P1=(ASPOS-ASOFF)/ASMRES
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32)
#define ASPOS (ASMRES*m162/(I108*32)+ASOFF)
#define GAP Q87
OPEN PLC17
CLEAR
    ADDRESS&2
    GAP=SLITWIDTH+2*LEVERLENGTH*(1-COS(ASIN(ASPOS/LEVERLENGTH)))
    ; If actuator motor record did the last move, set demands = readbacks
    ; This is not really needed as there is only one axis, but we'll put it
    ; in just in case
    if (ASMOVE = 1)
        ASMOVE = 0
        Q77 = Q87
    endif
CLOSE
ENABLE PLC17

CLOSE

;################################################
;; \file
;; Define motion for flexure slits
;;
;; Original Author: Alan Greer
;;
;; Defined axes:
;; - X (addr 6) = gap in same EGUs as actuator
;;
;; Macros:
;; - COORD = 3  CS number, e.g. 2
;; - PLC = 18  PLC number, should be CS number+15, e.g. 17
;; - AS = 2  Axisnum for actuator stroke, e.g. 1
;; - LL = 46  Lever length in mm
;; - SW = 0.0  Slit width at U=0 in mm
;################################################

; Change to CS3
&3

; Set relevant axes to use kinematics
#2->I ; +ve blade

; These are set by motor_in_cs.template
#define ASMOVE P(4700+2)
#define ASMRES P(4800+2)
#define ASOFF  P(4900+2)

; Lever length
#define LEVERLENGTH Q20
LEVERLENGTH = 46
; Slit width
#define SLITWIDTH Q21
SLITWIDTH = 0.0

; Calculate Gap from actuator position
#define ASPOS (ASMRES*P2+ASOFF)
#define GAP Q7
OPEN FORWARD
; X = Q7 = gap in mm = (SW + 2LL(1-cos(arcsin(Actuator/LL))))
; The formula used for this calculation can be found in the document
; 100208 FAT protocol 301.pdf
; located in
; S:\Technical\Engineering\Beamline Eng\I10\Design (AndyM & A Day)\beamline components\14_Exit slits S4\FATS
CLEAR
    GAP=SLITWIDTH+2*LEVERLENGTH*(1-COS(ASIN(ASPOS/LEVERLENGTH)))
CLOSE

OPEN INVERSE
#define ASPOS Q228
CLEAR
    ; calculate actuator pos in EGUs
    ASPOS = LEVERLENGTH*SIN(ACOS(1-(GAP-SLITWIDTH)/(2*LEVERLENGTH)))
    ; then in cts
    P2=(ASPOS-ASOFF)/ASMRES
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32)
#define ASPOS (ASMRES*m262/(I208*32)+ASOFF)
#define GAP Q87
OPEN PLC18
CLEAR
    ADDRESS&3
    GAP=SLITWIDTH+2*LEVERLENGTH*(1-COS(ASIN(ASPOS/LEVERLENGTH)))
    ; If actuator motor record did the last move, set demands = readbacks
    ; This is not really needed as there is only one axis, but we'll put it
    ; in just in case
    if (ASMOVE = 1)
        ASMOVE = 0
        Q77 = Q87
    endif
CLOSE
ENABLE PLC18

CLOSE

;####################################################
; Generic program for moving any co-ordinate system
; Original Author: Tom Cobb
; Used variables: Q71..Q79, Q81..Q89
; You should do a $$$ or type the following the first time you load this prog.
; If you type the commands in, ignore any errors. If you $$$, PLC1 will do it
; automatically for you at startup:
;&16 DEFINE LOOKAHEAD 50,10
;&15 DEFINE LOOKAHEAD 50,10
;&14 DEFINE LOOKAHEAD 50,10
;&13 DEFINE LOOKAHEAD 50,10
;&12 DEFINE LOOKAHEAD 50,10
;&11 DEFINE LOOKAHEAD 50,10
;&10 DEFINE LOOKAHEAD 50,10
;&9 DEFINE LOOKAHEAD 50,10
;&8 DEFINE LOOKAHEAD 50,10
;&7 DEFINE LOOKAHEAD 50,10
;&6 DEFINE LOOKAHEAD 50,10
;&5 DEFINE LOOKAHEAD 50,10
;&4 DEFINE LOOKAHEAD 50,10
;&3 DEFINE LOOKAHEAD 50,10
;&2 DEFINE LOOKAHEAD 50,10
;####################################################

;This program defines the program needed to do a move using the motor record
;on a CS axis
;to do a move we need to do &{CS}R
;to stop a move we need to do &{CS}A
;demand values are in &{CS}Q71..79
;The following are set by the motor record:
;Isx87 = Acceleration
;Isx88 = S curve
;Isx89 = Feedrate

; Set some defaults for all CS axes
i5213,15,100=50   ; segmentation time (needed for lookahead)
i5220,15,100=50   ; lookahead length (needed to limit max velocity to max set in CS)
i5250,15,100=1    ; Enable kinematics

OPEN PROG 10
CLEAR
LINEAR
ABS
; need to think about the consequences of including all axes in frax
FRAX(A,B,C,U,V,W,X,Y,Z)
A(Q71)B(Q72)C(Q73)U(Q74)V(Q75)W(Q76)X(Q77)Y(Q78)Z(Q79)
DWELL0
CLOSE

